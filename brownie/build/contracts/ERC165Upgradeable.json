{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "30": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
    "43": "openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol",
    "44": "openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol"
  },
  "ast": {
    "absolutePath": "openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol",
    "exportedSymbols": {
      "AddressUpgradeable": [
        23309
      ],
      "ERC165Upgradeable": [
        23676
      ],
      "IERC165Upgradeable": [
        24117
      ],
      "Initializable": [
        20334
      ]
    },
    "id": 23677,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 23634,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "102:23:43"
      },
      {
        "absolutePath": "openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol",
        "file": "./IERC165Upgradeable.sol",
        "id": 23635,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 23677,
        "sourceUnit": 24118,
        "src": "129:34:43",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
        "file": "../../proxy/utils/Initializable.sol",
        "id": 23636,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 23677,
        "sourceUnit": 20335,
        "src": "165:45:43",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 23638,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 20334,
              "src": "844:13:43"
            },
            "id": 23639,
            "nodeType": "InheritanceSpecifier",
            "src": "844:13:43"
          },
          {
            "baseName": {
              "id": 23640,
              "name": "IERC165Upgradeable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 24117,
              "src": "859:18:43"
            },
            "id": 23641,
            "nodeType": "InheritanceSpecifier",
            "src": "859:18:43"
          }
        ],
        "canonicalName": "ERC165Upgradeable",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 23637,
          "nodeType": "StructuredDocumentation",
          "src": "214:589:43",
          "text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."
        },
        "fullyImplemented": true,
        "id": 23676,
        "linearizedBaseContracts": [
          23676,
          24117,
          20334
        ],
        "name": "ERC165Upgradeable",
        "nameLocation": "823:17:43",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 23646,
              "nodeType": "Block",
              "src": "936:8:43",
              "statements": []
            },
            "id": 23647,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 23644,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 23643,
                  "name": "onlyInitializing",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 20318,
                  "src": "919:16:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "919:16:43"
              }
            ],
            "name": "__ERC165_init",
            "nameLocation": "894:13:43",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23642,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "907:2:43"
            },
            "returnParameters": {
              "id": 23645,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "936:0:43"
            },
            "scope": 23676,
            "src": "885:59:43",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 23652,
              "nodeType": "Block",
              "src": "1013:8:43",
              "statements": []
            },
            "id": 23653,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 23650,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 23649,
                  "name": "onlyInitializing",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 20318,
                  "src": "996:16:43"
                },
                "nodeType": "ModifierInvocation",
                "src": "996:16:43"
              }
            ],
            "name": "__ERC165_init_unchained",
            "nameLocation": "961:23:43",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 23648,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "984:2:43"
            },
            "returnParameters": {
              "id": 23651,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1013:0:43"
            },
            "scope": 23676,
            "src": "952:69:43",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              24116
            ],
            "body": {
              "id": 23669,
              "nodeType": "Block",
              "src": "1182:77:43",
              "statements": [
                {
                  "expression": {
                    "commonType": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    },
                    "id": 23667,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 23662,
                      "name": "interfaceId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 23656,
                      "src": "1200:11:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "==",
                    "rightExpression": {
                      "expression": {
                        "arguments": [
                          {
                            "id": 23664,
                            "name": "IERC165Upgradeable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24117,
                            "src": "1220:18:43",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$24117_$",
                              "typeString": "type(contract IERC165Upgradeable)"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_type$_t_contract$_IERC165Upgradeable_$24117_$",
                              "typeString": "type(contract IERC165Upgradeable)"
                            }
                          ],
                          "id": 23663,
                          "name": "type",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": -27,
                          "src": "1215:4:43",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_metatype_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 23665,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1215:24:43",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_meta_type_t_contract$_IERC165Upgradeable_$24117",
                          "typeString": "type(contract IERC165Upgradeable)"
                        }
                      },
                      "id": 23666,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "interfaceId",
                      "nodeType": "MemberAccess",
                      "src": "1215:36:43",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      }
                    },
                    "src": "1200:51:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 23661,
                  "id": 23668,
                  "nodeType": "Return",
                  "src": "1193:58:43"
                }
              ]
            },
            "documentation": {
              "id": 23654,
              "nodeType": "StructuredDocumentation",
              "src": "1027:58:43",
              "text": " @dev See {IERC165-supportsInterface}."
            },
            "functionSelector": "01ffc9a7",
            "id": 23670,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "supportsInterface",
            "nameLocation": "1100:17:43",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 23658,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1158:8:43"
            },
            "parameters": {
              "id": 23657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23656,
                  "mutability": "mutable",
                  "name": "interfaceId",
                  "nameLocation": "1125:11:43",
                  "nodeType": "VariableDeclaration",
                  "scope": 23670,
                  "src": "1118:18:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes4",
                    "typeString": "bytes4"
                  },
                  "typeName": {
                    "id": 23655,
                    "name": "bytes4",
                    "nodeType": "ElementaryTypeName",
                    "src": "1118:6:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes4",
                      "typeString": "bytes4"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1117:20:43"
            },
            "returnParameters": {
              "id": 23661,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 23660,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 23670,
                  "src": "1176:4:43",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 23659,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1176:4:43",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1175:6:43"
            },
            "scope": 23676,
            "src": "1091:168:43",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "public"
          },
          {
            "constant": false,
            "documentation": {
              "id": 23671,
              "nodeType": "StructuredDocumentation",
              "src": "1267:258:43",
              "text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
            },
            "id": 23675,
            "mutability": "mutable",
            "name": "__gap",
            "nameLocation": "1551:5:43",
            "nodeType": "VariableDeclaration",
            "scope": 23676,
            "src": "1531:25:43",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$50_storage",
              "typeString": "uint256[50]"
            },
            "typeName": {
              "baseType": {
                "id": 23672,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1531:7:43",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 23674,
              "length": {
                "hexValue": "3530",
                "id": 23673,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1539:2:43",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_50_by_1",
                  "typeString": "int_const 50"
                },
                "value": "50"
              },
              "nodeType": "ArrayTypeName",
              "src": "1531:11:43",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
                "typeString": "uint256[50]"
              }
            },
            "visibility": "private"
          }
        ],
        "scope": 23677,
        "src": "805:755:43",
        "usedErrors": []
      }
    ],
    "src": "102:1460:43"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 100
    },
    "version": "0.8.15+commit.e14f2714"
  },
  "contractName": "ERC165Upgradeable",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "IERC165Upgradeable",
    "Initializable"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.",
    "kind": "dev",
    "methods": {
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "__gap": {
        "details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
      }
    },
    "version": 1
  },
  "offset": [
    805,
    1560
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "a8e5448e02aa0afa726f2a39ba33e77ec7a04087",
  "source": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n",
  "sourceMap": "",
  "sourcePath": "openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol",
  "type": "contract"
}