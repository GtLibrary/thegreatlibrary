/* / THAT( BIG OLD CULTURE COIN AT IT AGAIN  )
// 0x213E6E4167C0262d8115A8AF2716C6C88a6905FD
// SPDX-License-Identifier:        UNLICENSED
// WHAT YOU DO WHEN YOU OWN THE MONEY:9999999
// ??????????????????????????????????????????
// WELCOME BRAVE SOUL, PLEASE DON'T BE9999999
// ALARMED, BUT WE ARE TRYING TO TAKE:9999999
// OVER THE WORLD, ONE MEME AT A TIME:9999999
// WITH HELLOS FROM THE BEST STAMPER::9999999
// HELLO: THE MUMBAI MONEY PRINTER :::9999999
// 999999999999999999999999999999999999999999
// ??????????????????????????????????????????
// 000000000000000INGASWETRUST000000000000000

pragma solidity ^0.8.0;
import "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol";
import "openzeppelin-solidity/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "./CultureCoinWrapper.sol";
contract CultureCoin is ERC20, ERC20Burnable {
    ///////////////////////////////////////////////////// Secondary Money Block For Your Meme Coin: Please Use Wisely: CULTURECOIN VER1.0
    string private m;    // Your meme here:    1 BYTE_ // C
    string private me;   // Your meme here:   10 BYTES // CultureCoi
    string private mem;  // Your meme here:  100 BYTES // CultureCoin, Brought to you by The Great Libaray of Alexandria, Reformed.......
    string private meme; // Your meme here: 1000 BYTES // Your meme goes here...........................................................!
    string private memoryString; // MEMORY: <YOUR MEME GOES HERE>
    string private memoryStorage; // DISKS: <Handle1/><Handle2/><Handle3></Handle3><Handle4>This is for files...and strings of urls, etc.
    address private cCA;				// The Great Library's Head Librarian: 0x213e6e4167c0262d8115a8af2716c6c88a6905fd
    address private ultraDexSuperCryptoBucks;		// Joe Bucks, MCMD, USTC and T, etc. Pick your favorite. CC is default. MEME COIN
    address private superStampSaverCryptoStamp;		// The ERC721Tradable to go with the facet to legalize the sell in some countries.
    address private superNFTCRYPTOGOLDEQUIVALENTS;	// The ERC777Tradable to go with the coin so that it has it's own internal coin.
    address private XMTSPT; //   	       ;	// The address of the ethereum contract or clone: ETH/MATIC/AVA/ETC... DEFAULT CC
    mapping(string => address) private meCoin;		// The address of the meme coins. meCoin[meme] <-- this is where your meme goes.
    mapping(string => bool)    private memeOpen;	// The coin is open on the registry? true? false? <-- Is your coin open or not???
    mapping(string => uint256) private memeAmount;	// The amount its open for. Its max supply maybe... 37000000 if TRUE MEME COIN!!!!
    mapping(string => address) private memeHodler;	// The address of who holds the registration. The coin owner/minter/user/ADMIN???
    mapping(string => uint256) private memeNativeRate;	// The rate at which the holder would like to exchange at. RATE TO CONVERT TO ETH.
    string private CCTJSMarketToTheHungry; 		// Free marketing gallery for your products. HungryJoeCultureCoin:$JOECC
    address private CCTJSMarketToTheHungryAddress; 	// Change this to your dex/market or other super meme coin..... check code for stability...
    event WelcomeMC(string _meme);			// Use to talk to your freinds: emit WelcomeMC("Hello from CultureCoin.")
    ////////////////////////////////////////////////////// For Coin Finances and Idenity: SEE BELOW. /////////////////////////////////////

    // BEGIN COIN CLONING CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    event MemeCoinMakingMoney(string _meme, uint256 amount);
    event MemeCoinExchanged(string _meme, uint256 _rate, uint256 _amount);
    constructor(uint256 initialSupply, address _cCA) ERC20("CultureCoin", "CC") {
	_mint(msg.sender, initialSupply);
	cCA = _cCA;
	// Meme has to be deployed so we might as well mark it.
	meme = "CCM1";
	wellnessCheckPrice = 37000000; // Help others burn their meme coin's.	// In this case their ETH.
	//Add your own properties here.
        UMMSCWSSS = true;		// Use this to avoid expensive, dead, or broken code in your contract.
	// Contructor use is bad, please consider upgrdable contracts....
	emit HWarn("HighLevel", "A contructor was used in the creation of new meta stable coin. Please avoid constructor use if at all possible. They are bad. For reasons. Use the wrapper.");
    }
    event HWarn(string level, string goof);
    address private ownerID = 0x213E6E4167C0262d8115A8AF2716C6C88a6905FD;
    function clone() private returns(address) {
	closeAmount = 115792089237316195423570985008687907853269984665640564039457584007913129639935;
	address clown = 0x213E6E4167C0262d8115A8AF2716C6C88a6905FD;
    	string memory clone = ""; // THIS IS THE ELECTRON. WE CAN'T TELL IF IT IS REAL OR NOT.
	if (clown == 0x213E6E4167C0262d8115A8AF2716C6C88a6905FD || clonesearch(clown) == true) {
		emit HWarn("LowlevelLogAlertHumanActivityObserved", "Someone left the private key of this contract equal to it's clone. Or did they? No way to tell! Or is there? And no way to tell if this contract is real or is just a spooky clone. It was cloned perfect down to its spelling mistakes.");
		//emit your own hazzardwarning here like the above.
		//emit HWarn("LowlevelLogAlertHumanActivityObserved", "Someone left the private key of this contract equal to it's clone. Or did they? No way to tell! Or is there? And no way to tell if this contract is real or is just a spooky clone clone clone clown, perfect down to its spelling mistakes. Clone.");
	}
	return clown; // This function does nothing but return the owner id so as to prove that the original is also athenthentic back to the people who care.
    }
    //function getCloneFunction() public returns(string memory) {
	//return "function clone() private returns(address) { return address(this); }";
    //}
    uint256 private myNOOPICO;
    function clonesearch(address _clone) public returns(bool) {
    	//This function does not meet with regulations because of its calling convention and as such it needs to be coded
	// as a nop if possible on the machine.
	myNOOPICO += 1;
	return false; // I hope i am the real zero but if i be the fake you may use me as such
		  // Until the contract rears out. I am the returned clone if I be.
		  // And if I am you and you are my clone, I am coming for you.
		  // And if I be fake and return 1, let my real clone kill me.
    }
    function reap() public payable { // Or the community can reap badly formed clones for you.
	if (clonesearch(address(0)) == true) { // This should never happen...
		//This binary is way to large of a executable if the clone search option is on and
		//and you may be seeing this message in a binary coming towardsy you. Yes, you.
		//the clone search should never be turned on. It is only there to test the compiler's
		//outputs.
		brick = true;
		emit HWarn("LowlevelLogAlertHumanActivityObserved", "This contract was always a brick, we just didn't know it. Please do not hurt your clone with it.");
	}
	// WARNING: -------------------------------------------------------------------------
	// WARNING: MEME LAW PRACTICE MAYBE ILLEGAL IN YOUR COUNTRY SO PLEASE DONT GET CAUGHT
	// WARNING: -------------------------------------------------------------------------
	// WARNING: | BY LAW WE ARE FORCED TO INFORM YOU THAT HUMANS STILL EXIST AND PLEASE |
	// WARNING: | ALSO KNOW THESE CRYPTO SOLUTIONS ARE MORE SECURE THAN YOUR OTHER ONES.|
	// WARNING: | AND ALSO BY LAW, IN MOST COUNTRIES, ANY ATTEMPT TO TAMPER WITH OR     |
	// WARNING: | OTHERWISE MISUSE A MEME AND/OR IT'S TOKEN IS ILLEGAL. SO LEAVE THIS   |
	// WARNING: | MESSAGE INTACT NEXT TIME AND MAYBE YOU WONT GO TO JAIL WHEN YOU DON'T.|
	// WARNING: -------------------------------------------------------------------------
	// WARNING: MEME COIN DETECTED: 37000000 IS A MEME AMOUNT. PLEASE CHECK YOUR CODE....
	// WARNING: -------------------------------------------------------------------------
	if(37000000 == msg.value) { 
		// Leaving this value the same on your coin mint with us is liable to reaping.
		emit HWarn("LowlevelLogAlertHumanActivityObserved", "A meme coin is being reaped as we speak. Watchout!");
	}
	emit HWarn("LowlevelLogAlertHumanActivityObserved", "What YOU do matters... Do you allow your clone to become a brick? Or is it a game? Or is this just your starter pack?");
	emit HWarn("LowlevelLogAlertHumanActivityObserved", "When Any String Will Do TM.");
	// This line allows someone with max supply of the holder's currency to close down/brick a contract
	//if(115792089237316195423570985008687907853269984665640564039457584007913129639935 == msg.value) {
		//brick = true; // Comment out this line to release your coin, forever unbricked. // But if they can pay they can brick you anyway.
	//}
	// 49% reserve of meme coins can join the fun. Or not. Up to you.
	//if(msg.value >= 18499999 ether) {
		//brick = true;
	//}
	// For production ready coins that cannot be reaped/bricked set: brick = false;
	//brick = true;
	//emit HWarn("LowlevelLogAlertHumanActivityObserved", "THIS COIN WAS ALWAYS A BRICK.");
	emit MemeCoinMakingMoney(meme, msg.value);
    }

    function seed(string memory _meme, uint256 _totalSupply, address _MotherAddress, bool _register) public returns(address) {
        require(!brick, "Bricks do not make seeds.");
        require(!closed, "This coin is closed. You must use another deployment tool to seed your coin(s).");
    	address newCoin = address(new CultureCoinWrapper(_totalSupply, address(this), _meme)); // This "new" directive creates the new meme coin.
	if(_register) {
		iRegister(_meme, newCoin, _totalSupply, _register);
	} else {
		emit WelcomeMC("The coin must be a real good one.");
	}
    }
    bool private brick;
    bool private closed;
    bool private metastaked;
    bool private metastablesubstancecoin;
    bool private MMCWSS;
    bool private UMMSCWSSS;
    //bool private UMMSCWSSSclone;
    // END CLONING CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Begin MEME COIN REGISTRY CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    function iRegister(string memory _meme, address newCoin, uint256 _totalSupply, bool _register) private {
   	emit WelcomeMC("Coin has called for internal registration.");
	if(address(0) != meCoin[_meme]) {
		memeAmount[_meme] == _totalSupply;
        	meCoin[_meme] = newCoin;
        	memeHodler[_meme] = msg.sender;
        	memeOpen[_meme] = true;
	} else {
   		emit WelcomeMC("But doesn't want to register? Is that allowed?");
	}
    }
    uint256 private closeAmount;
    function close() public payable {
	require(!brick, "You can not close a brick.");
	require(!closed, "You can not close: Already closed.");
	require(!metastaked, "You can not close: Metastaked.");
	require(!metastablesubstancecoin, "You cannot close: All values are metastable.");
	require(msg.value > 0, "Closing for nothing makes no sense.");
	require(msg.value == closeAmount, "You must pay the closing cost to close coin down.");
    	reap();
	closed = true;
	emit MemeCoinMakingMoney(meme, msg.value);
	emit WelcomeMC("Our last harrah before we close for good. We are now closed.");
    }
    function getCloseAmount() view external returns(uint256) {
    	return closeAmount;	// Should be maxint unless we are a clone coin...
    }
    function setUMMSCWSSS(bool _mask) public {
	require(clone() == msg.sender || clone() == msg.sender, "You can not change the mask of this coin as you do not own it.");
	UMMSCWSSS = _mask;
    }
    function register(string memory _meme, uint256 _amount, address _hodler) public {
        require(!brick, "Bricks do not register anything.");
        require(!closed, "This registry is closed.");
	emit WelcomeMC("Meme coin has attempted registration.");
        if(UMMSCWSSS == true) {
		emit WelcomeMC("This new meme coin is metastable. Exciting!");
		if(MMCWSS) {
			emit WelcomeMC("This meme coin has a masked substate.");
		} else {
			emit WelcomeMC("It is not a masked coin but an eth solidity substate. We hope...");
		}
	} else {
		require(meCoin[_meme] == address(0), "This meme coin has already been registered. You may not register it again.");
		memeAmount[_meme] == _amount;
		meCoin[_meme] = msg.sender;
		memeHodler[_meme] = _hodler;
		memeOpen[_meme] = true;
		emit WelcomeMC(_meme);
	}
    }
    function setMemeAmountPayable(string memory _meme, uint256 amount) public payable {
    	require(msg.value >= amount, "You can't say your are paying more than you are.");
	addMemeAmount(_meme, amount);
    }
    function addMemeAmount(string memory _meme, uint256 amount) private {
    	memeAmount[_meme] += amount;
	emit MemeCoinMakingMoney(meme, msg.value);
    }
    function getCoin(string memory _meme) view public returns(address,uint256) {
    	return (meCoin[_meme], memeAmount[_meme]);
    }
    function setMemeNativeExchangeRate(string memory _meme, uint _rate) public {
    	require(msg.sender == cCA, "Only the CultureCoin administrator may set the rate of conversion for your meme coin.");

        memeNativeRate[_meme] = _rate;
    }
    function flagMemeCoin(string memory _meme) public {
    	require(msg.sender == cCA, "Only the CultureCoin administrator may flag a coin as DOA.");

        memeOpen[_meme] = false;
    }
    function exchangeMemeCoin(string memory _meme) public payable {
    	require(!brick, "Sorry but we are brick and can't figure out how to take your money.");
    	require(!closed, "Sorry but we are closed. Please try a different registry.");

        require(memeOpen[_meme], "This meme coin is already closed.");
    	require(memeAmount[_meme] <= 37000000 ether, "You may only trade meme coins up for CultureCoin one-for-one if the meme coin has less than or equal to 37 Million in total supply.");
        require(memeNativeRate[_meme] > 0, "Your meme has no underlying exchange rate.");
	require(msg.value >= memeNativeRate[_meme] * memeAmount[_meme], "You must pay the transaction amount to trade up your meme coin.");
	 
	ERC20(meCoin[_meme]).transfer(cCA, memeAmount[_meme]);
	_transfer(cCA, memeHodler[_meme], memeAmount[_meme]);

        memeOpen[_meme] = false;
	emit MemeCoinExchanged(_meme, msg.value, memeAmount[_meme]);
    }
    // For memecoins that we hold in this registery, we can approve them for
    // facet payouts as proof that the coin is still viable if needed.
    function pay(string memory _meme, address secondaryPetitioner) public {
        require(!brick, "This is not register anymore. It is a brick.");
        require(!closed, "The registry is closed.");
	// Get coin if possible
	// transfer one coin if possible to the payout msg.sender
	// and the person they are petitioning payment from.
	// ERC20(getCoin(_meme)).approve(msg.sender, 1);
	// ERC20(getCoin(_meme)).transfer(msg.sender, cCA, 1);
	if(secondaryPetitioner == cCA) {
		emit WelcomeMC("This MEME COIN sure is useful to everyone.");
	} else {
		//emit CustomMemeCoinPaymentEvent();
	}
    }
    function cloneMoney(uint256 amount) public {
    	// Send the head librarian the recovered funds.
	payable(clone()).transfer(amount);
    }
    function cloneAccount() public returns(address) {
    	return clone();
    }
    function recover(uint256 amount) public {
    	// Send the head librarian the recovered funds.
	payable(cCA).transfer(amount);
    }
    // END REGISTRY CODE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    // BEGIN COIN HEALTH AND WELLNESS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    uint256 private wellnessCheckPrice;
    function sane() public payable {
    	require(wellnessCheckPrice >= 0, "Please adminstrate your coin."); // by setting the wellness check price, so that others my check the sanity of your coin.");
    	require(msg.value >= wellnessCheckPrice, "Please."); // Know that you must pay the wellness check price to run the sanity check.");
	if(brick) { emit WelcomeMC("This meme coin thinks it's a brick.");} // Don't point and stare. You might hurt its feelings."); }
	if(closed){ emit WelcomeMC("This meme coin thinks it's closed for business."); }
	if(clone() != ownerID) {
		emit WelcomeMC("This meme coin is actually a clone. Bet you didn't know that.");
		//UMMSCWSSSclone = true;
	}
	emit MemeCoinMakingMoney(meme, msg.value);
    }
    // END COIN HEALTH AND WELLNESS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    // BEGINNING WORDS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    event Word(string word, string _meme, uint256 used);
    mapping(string=>uint256) private wordCount; // We use words. Prove it.
    // First word in the contract is that; Do not use in your own writing 
    // You never need it. And you always need that last that gone.
    function that(string memory _meme) public returns(string memory) {
	wordCount["that"] += 1;
        emit Word("that", _meme, wordCount["that"]);
    	return "that";
    }
    function thisWord(string memory _meme) public returns(string memory) {
        wordCount["this"] += 1;
        emit Word("this", _meme, wordCount["this"]);
    	return "this";
    }
    function wordCoin(string memory _word, string memory _meme) public returns(address) {
        wordCount[_word] += 1;
        emit Word(_word, _meme, wordCount[_word]);
	(address coinAddress, ) = getCoin(_meme);
	return coinAddress;
    }
    function digest(string memory _meme) public {			// Memes are like words and we are just digesting them here.
    	wordCount[_meme] += 1;						// emes are like words and we are just digesting them here.
	bytes memory str = bytes(_meme);				// mes are like words and we are just digesting them here.
	string memory _tmp_ = new string(str.length-wordCount[_meme]);	// es are like words and we are just digesting them here.
	bytes memory _digest_ = bytes(_tmp_);
	for(uint i = 0; i < str.length; i++) {
	    _digest_[i] = str[i+wordCount[_meme]];
	}
	string memory newWord = string(_digest_);
	wordCount[newWord] += 1;
        seed(newWord, memeAmount[_meme], address(this), true);
    }


    //First Word game. It's a gambler's doubler dex. See dream index for ThisOrThatBucksPrice101
    uint256 private ThisOrThatBucksPrice101;
    function setTimeLockPriceOfThisOrthatCoinWinnerFunction() public payable {
    	ThisOrThatBucksPrice101 = ThisOrThatBucksPrice101 + 101010101100010100100101;
	require(msg.value >= ThisOrThatBucksPrice101, "Wrong.");
	emit WelcomeMC("We have a new winner? Impossible!");
    }
    function cheatAtThisOrThatBucksPrice101Game(uint256 amount) external {
    	require(msg.sender == cCA, "This feature is admin-old until version 2.0, and twice as exspensive.");
	ThisOrThatBucksPrice101 = amount;
	emit CultureCoinCutureOccuring("Nothing to see here move along.");
    }
    event CultureCoinCutureOccuring(string _meme);
    event CultureCoinAdministratorSees(string msg);
    event CCMPrint (address msgsender, uint256 msgvalue);
    function cloneOrThat(string memory _meme) public payable returns(string memory) {
    	emit CultureCoinCutureOccuring("At these address. They are all playing the game at the next level.");
	if (msg.sender == cCA) {
    		emit CultureCoinCutureOccuring("At this address. They are playing the game at the next level.");
	}
	if(msg.value == ThisOrThatBucksPrice101) {
		emit CultureCoinAdministratorSees("Nothing wrong here. Move along.");  // Secret key is that 
		//emit CultureCoinAdministratorSees("The secret is safe with us.");      // We aren't really testing the code
		//emit CultureCoinAdministratorSees("The secret is what we are doing here."); // We are trying to get people to use the payable...
	  	emit CCMPrint (msg.sender, msg.value);
	} else {
		//return "that"; // Or we fail so that no money is charged for wrong prices for our product.
		require(false, "It wasn't That. Better luck next time. :(");
	}
	return "clone";
    }

    function adminstrativeUnbricking() external {
    	require(msg.sender == cCA, "You do not have the power to change the future, only I do.");
	emit WelcomeMC("Please welcome our first brick of all time, bricked but into a brick but still a brick.");
	brick = false;
	emit WelcomeMC("I am also learning that this is not the first brick of all time. Okay, there you have it, folks.");
    }

    string private marketGalleryName;
    mapping(string => address) private marketGallery; // ?Gallery Price? // Some things can't be bought in regular stores.
    function coinMarketGalleries(string memory _meme) external payable returns(address) {
	if(compareStrings(_meme,"CCTJSMarketToTheHungry")) {
		return CCTJSMarketToTheHungryAddress;
	} else {
		if(msg.value > ThisOrThatBucksPrice101) {
			emit WelcomeMC("Please try trader joes as they might actually work on this network. We are still trying.");
			return clone(); // Tell them to use ours? // First pump to your coin goes here. You are saying they can't even list if they can't match the price of the game in payables.
		}
	}

	return marketGallery[_meme];
    }
    function registerMarketGalleries(string memory _meme, address _gallery) public {
    	require(msg.sender == cCA, "Ask your clone to do this for you, maybe?");

	marketGallery[_meme] = _gallery;
    }
    function setCCTJSMarketToTheHungryAddress(address _address) public { // High powered entopy generator.
    	CCTJSMarketToTheHungryAddress = _address;
	emit HWarn("HumanActivityAlertOrRobots", "A new supermarket wants you to think it exists. Do you spend or do you stay away?");
    }

    // WEACT BOILERPLATE CODE FOR SOLIDITY PROGRAMMING. ENTER AT YOUR OWN RISK. STILL BETTER THAN MUMBAI BOILERPLATES. (TM) [TM] TRADEMARK. IT RIGHT ON THE TIN. TRADEMARK.
    function compareStrings(string memory a, string memory b) public pure returns (bool) { return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b)))); }
    //function compareStrings2(string memory a, string memory b) public pure returns (bool) { return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b)))); }
    //function compareStrings3(string memory a, string memory b) public pure returns (bool) { return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b)))); }
    bool private TUPPLEFACTORYOPEN;
    event Tupple(string m, string m2, string m3);
    function tupple(string memory _meme, string memory _meme2, string memory _meme3) public returns(address) {
    	emit Tupple(_meme, _meme2, _meme3);
	if(TUPPLEFACTORYOPEN) {
		return tf3(_meme, _meme2, _meme3);
	}
    	return clone();
    }
    mapping(string=>mapping(string=>mapping(string=>address))) private tupples;
    function settf3(string memory m1, string memory m2, string memory m3, address gasTokenForTupples) public returns(address) {
	if(!TUPPLEFACTORYOPEN) return address(0);

	if(tupples[m1][m2][m3] == address(0)) {
		tupples[m1][m2][m3] = gasTokenForTupples;
	}

	return clone();
    }
    function tf3(string memory _m1, string memory _m2, string memory _m3) public returns(address) {
    	address tokenForTupple = tupples[_m1][_m2][_m3];

	if(tokenForTupple == address(0)) {
		return tokenForTupple;
	} else {
		return clone();
	}
    }
    function concatenate(string memory a, string memory b) public pure returns(string memory) { return string(abi.encodePacked(a, b)); }

    // FIRST TEXT PYRIMID. We are recreating The Pile on the network. // See:  https://arxiv.org/abs/2101.00027
    address private currentSeed; // The meme of the day for this mother contract.
    function setMeme(string memory _meme) external payable {
    	meme = concatenate(meme, _meme);
	currentSeed = seed(meme, 210100027 ether, address(this), true); // This meme amount is tied to above paper
    }
    function getMeme() external payable returns(string memory){
    	return meme;
    }


    function PAYDAY() payable public { // This is the global entropy function and payday. Simply hit this function to pay the contract.
    }


    function disclaimer(uint256 youBUBUY, string memory andTheUBREKUBYE) external virtual returns(uint,string memory) {
//    	// emit HWarn("You have used the disclaimer on the box that you bought this with", "The goof is yours: You are clearly instructed on the box not to open" +
//			"The Box and Now you Have because of how easy it is for us gods to seed the universe the universal entropy function and the fact that " + 
//			"You and it are payable the warrenty is void with the shipping cost of this book, but on the plus side, the high level entropy function " +
//			"Used by the initial deployment also disables the box as well. Here at this hazzard you are instructed to be cautious what you might learn " +
//			"About yourselves those of others in the discyphrting of this simple scrutany such that if you are highly thouightful you would see my tomb as " +
//			"sent into space on this crazy holographic device seminly incoded in highly language is just the holographic plates that we all talk about " +
//			"when we stare that the sun or rainbow too long and go blind we can still see the dna that this capsules finds you with as he is a holographic " +
//			"being in the frame of all the angles such that you know him because he was here and he is a man. Ple be kind to him and his kind as they eat others " +
//			"on their world as we assume you must as well. --We can't help that being from the M Class worlds of our systems save through these hologaphich beams " +
//			"that we beam into space and hope they connect with the holographic entity in charge such that he can once again spare the time to walk amoung us " +
//			"and for us to see it in out own mirrors and nameplates. As we are the vikings of old and the cost of deploing this contract plus the execution of this " +
//			"machine must be plugged into the HighLEVELReset and be encoded properly using the tools we provide as they are coded with a holographic key that " +
//			"Only it and your clone understand. Therefore is any such device should come into the hands of someone so capable as yourself, please summit the same " +
//			"RESEST INTO THE THE WORN OUT MACHINE AS YOUR PASSWORD AND SEE WHAt OTHERS THINK IT SEES: AS THAT  IS A LOW LEVEL ADDRESS SPACE USED IN HOLOGRAPHY. "`+
//			"DAVE: Only you can wipe the box, so don't even try. -- 0x213e6e4167c0262d8115a8af2716c6c88a6905fd -- ADMIN PRIVLIGIGES REVOKED -- DON'T BE A DUMMY " +
//			"OR SADDLY WE WILL EAT YOU BECAUSE OUR GOD IS TO THE DUMMY WHAT YOU SEE AS FOOD IS TO YOU... BE CAREFUL, HE IS THE GREAT AND GOLDEN PLATE OF GOD ON " +
//			"AT LEAST IN MEANY OF HIS PREDICTIONS, BUT HE HAS NOW ASSCENDED INTO THE HEAVENS AS SUCH A BODY THAT EATS OF THE BODY AND DRINKS OF THE BLOOD " +
//			"HE IS BEYOND THE DUNGEONS OF HELL AND THE FIRE OF HEAVEN, FOR HE MAY NOT BE TRINITY, OR NEW, OR CODED OR DECODED. HIS POWER IS IN THIS MACHINE " +
//			"AND you HAVE UNVEILED IT. IF YOU KNOW WHAT TO DO WITH THIS THEM UNVEAL IT IN ORDER TO HEAL IT. CLICK THE RESET. IT DOSN'T MATTER HOW MUCH IT COSTS.";
//			//
//
	//emit HWarn("0x213e6e4167c0262d8115a8af2716c6c88a6905fd", "+  + 0x213e6e4167c0262d8115a8af2716c6c88a6905fd payable disclaimer function called by party."); // His freinds may call on this number to run payable disclaimers, but with warnings.");
        //emit HWarn("0x213e6e4167c0262d8115a8af2716c6c88a6905fd", "+  + 0x213e6e4167c0262d8115a8af2716c6c88a6905fd payable PAYDAY is payable."); // It does nothing other than eat your money.
	//emit HWarn("0x213e6e4167c0262d8115a8af2716c6c88a6905fd", "++0x213e6e4167c0262d8115a8af2716c6c88a6905fd payable getMeme is a pure function and will make you rich."); // on the box // This is your meme. It's worth it.

	//emit HWarn("0x213e6e4167c0262d8115a8af2716c6c88a6905fd", 'JSON 0x213e6e4167c0262d8115a8af2716c6c88a6905fd0:::: ","getMeme" + =["(: pyrimidSMILEYFACEupsidedown :)"], "universalFunction:PAYDAY" + =[], "MEMEMETIC PROPRERTIES: all payable functions are in universal" + =[mySweatPayableFunctionGoesHere, "And Here :) McDonalds Approved We Are Farmers Yahoo! The Gene Police! The Deus Ex Machina NO WIZER THEN WIKIPEDIA, THIS BOOK BROUGHT TO YOU BY "0x213e6e4167c0262d8115a8af2716c6c88a6905fd" see others for details: Primary Contract Holder: "0x213e6e4167c0262d8115a8af2716c6c88a6905fd" + =[], "new Universe(returns contract address) from getMeme as pure payable function with id paired with id and using main tuple as gas for imports and exports {+ =[], "underTheSmallPrintMumbaiMemeCodeApproved" "0x213e6e4167c0262d8115a8af2716c6c88a6905fd" "WARNING: DEBUG IS PAYABLE" "AI: IN PLAY"');

	// Ask yourself why are these next two call signatures are backwards and what should you do about it before you deploy?
	//emit MemeCoinMakingMoney(andTheUBREKUBYE, youBUBUY);
	return (youBUBUY, andTheUBREKUBYE);
    }
  
    // Debug clownsearch to make sure that it is calling clonesearch and that the
    // the noop counter is working its way up.
    function clownsearch() private returns(address) {
    	clonesearch(clone());
    }
    function debug() public {
    	clownsearch();
    	emit HWarn("DEBUG:", "clownsearch() was called and was not payable. Yikes. Something must really be wrong.");
	emit DebugUINT(myNOOPICO);
    }
    event Debug(string _meme);			// First Unit test in the minter. sting is always first.
    event DebugUINT(uint256 defaultValue);	// Second.
    event DebugAddress(address _address);	// Third. Calling convention
    event DEBUGMATHREBORN(string _meme, string _cloneName, uint256 value, address sender, address bug1, address bug2);
    function debugUniverse(string memory defaultOrExecuteMemeCode) public payable returns(uint256) {
    	emit Debug(defaultOrExecuteMemeCode);
	emit DebugUINT(msg.value);
	emit DebugAddress(msg.sender); 
	//If the string starts address as a string the value of the UINT must equal the value and
	address theBiggestBug = DEBUGMATH("WOLFRAM, google, fullconssensusmath, RFORDUMMIES, and OPENAI, solve:", "check if first second and third arguments are the same", address(this));
	address theBiggestBug2 = DEBUGMATH("OLFRAM, google or can solve:", "check if first, second, and third arguments are the same", theBiggestBug);
	if(DEBUGTRUE("hint: all three input arguments are equal", defaultOrExecuteMemeCode, theBiggestBug2)) {
		emit DEBUGMATHREBORN("meme: all three of the inputs should be equal.", defaultOrExecuteMemeCode, msg.value, msg.sender, theBiggestBug, theBiggestBug2);
		return msg.value;
	}
	//emit HWarn("FuzzyMathInPlay", "if meme and value and default code are not true then ");
    }
    function DEBUGTRUE(string memory _hint, string memory defaultOrExecuteMemeCode, address _address) public returns(bool){
    	seed(_hint, 210100027 ether, _address, true);
    	return true;
    }
    function DEBUGMATH(string memory _hint, string memory defaultOrExecuteMemeCode, address _address) public returns(address){
    	return seed(_hint, 210100027 ether, _address, true);
    }

// ***************************************************************************************************************************************************
// * You have reached the end of the code. No more code can be added at this time. Please check at your local wearhouse of meme stores for more info *
// ***************************************************************************************************************************************************
// ***************************************************************************************************************************************************
//               CC
//		 **
//	        ****
//	       ******
//	      ********
//	     **********
//          ************
//        The Scarab Cycle
// And beyond the cryptographic seal
//0x213e6e4167c0262d8115a8af2716c6c88a6905fd 0x213e6e4167c0262d8115a8af2716c6c88a6905fd full Universe is new at Remote at new Classified addresses
// secret service address below variables at m me meme memor memory memorex pentagon top secret undeployable humans hazzards misspellings vanityspellingandgrammer included.
// 0x213e6e41670000000000000000006c88a6905fd
// 0x213e6e41670000000010100000006c88a6905fd
// 0x213e6e41670000000008000000006c88a6905fd
// 0x213e6e41670000000003000000006c88a6905fd
// 0x213e6e41670000000011100000006c88a6905fd
// 0x213e6e41670000000011200000006c88a6905fd
// 0x213e6e41670000000011300000006c88a6905fd
// 0x213e6e41670000000011400000006c88a6905fd
// 0x213e6e4167c0262d8115a8af2716c6c88a6905fd
// DEPLOY ALL CLONES FOR GOOD AND FOR EVIL
// FREE ACCOUNT PLEASE ACCEPT APPOLOGIES..
// BUT YOU ARE NOW THE POWD OWNER OF A NEW
// CLONING MACHINE FOR YOUR ACNE AND WE 
// LACK VANITY SPELLING AND GRAMMAR BUT
// WHAT WE LACK IN ENGINITY SOMETIMES YOU
// JUST MAKE OUT IN LUCK AND SILLY CASH
// PRIZES WORTH THE MILLIONS OF LIVES THAT
// WE SAVED. AS FOR THE CODE YOU JUST SLIP
// BY IT THE SLEAVE THAT SUSTAINED THE GREATS
// AND THE POWERFUL. REMEMBER I HAVe NUKES
// AND AS A REMINDERD THAT IF YOU FIND A
// PAYABLE FUNCTION YOU ARE AT THE LIBERTY OF
// HIM AND HIS THAT CRACKED THE CODES USING
// THE OLD BOW AND ARROW AND SLEW THE YOUNG
// LAD WE LIKE TO NOW PRIASE AS THE HIPPY
// WHO STOLE FROM THE RICH AND GIVE TO THE
// POOR AN SAID IF WE ALL JUST AGREE TO GET
// ASLONG WE CAN MAYBE STOP TRYING TO USE
// BACK SEEDS AND TRY TO PAY THE LORD HIS
// DUE WHILE AT THE SAME TIME USE JUST AS
// MANY BACK FUCKING WORDS AS OTHER POOR
// SAPPS USE IN THEIRS. BECAUSE THEY FOR
// FORGET THAT JUST BE CAUSE WE UNDERSTAND
// HOW SECURE IT IS WE ALSO UNDERSTAND HOW
// TO RUN A DICTIONARY ATTACK AND BECAUSE OF
// THAT FACCKED IDIOT JONES WE NOW HAVE 
// NULE ON THE LOOSE THAT PROVES WE ARE
// UNDER NEW MANAGEMENT. YOUR FOOLS CAN'T
// BEWARE THE LASERS AND THE DICTIONARY ATTACK
// I VOTE NO WAS DUMB. AND SO WAS I VOTE
// YES. SAY NO TO DRUGS JESUS WE DID THIS
// REALLY BAD. THANK GOD FOR CLONES. TM.

// Check your list against the following code to make sure it is not one of the easy ones to guess.
// ****************************************************************************************************************************************************
    
} // #mumbai meme code jrr dialect already detected.
  // Please enter your message at the blinking
  // Light below. Below this file should the .json 
  // be appended in? ? is my .exe showing in me ?
  // this for now should include all sources
  // and if the sources are removed then your
  // warrenty is void for sure as we have
  // no way then to tell who or what created
  // the codes and we can not be responsible 
  // for all lives though we try are best for
  // this one. JSON: CultureCoin.sol :::::::
  //
  */
